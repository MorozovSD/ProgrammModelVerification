digraph tree {
    "source(id: 1)";
    "sourceItem(id: 1)";
    "funcDef(id: 1)";
    "funcSignature(id: 1)";
    "test_func11(2, 10)";
    "typeRef(id: 2)";
    "array(id: 1)";
    "typeRef(id: 1)";
    "bool(2, 27)";
    "funcDef(id: 2)";
    "funcSignature(id: 2)";
    "test_func11(4, 10)";
    "typeRef(id: 3)";
    "custom(id: 1)";
    "stef(4, 27)";
    "funcDef(id: 3)";
    "funcSignature(id: 3)";
    "test_func11(6, 10)";
    "typeRef(id: 4)";
    "bool(6, 27)";
    "funcDef(id: 4)";
    "funcSignature(id: 4)";
    "test_func111(10, 10)";
    "statements(id: 5)";
    "if_else(id: 1)";
    "a(11, 4)";
    "statements(id: 1)";
    "assign(id: 1)";
    "a(12, 5)";
    "a(12, 1)";
    "assign(id: 2)";
    "a(13, 5)";
    "a(13, 1)";
    "statements(id: 2)";
    "new_variable(id: 1)";
    "a(15, 5)";
    "typeRef(id: 5)";
    "bool(15, 10)";
    "new_variable(id: 2)";
    "a(16, 5)";
    "typeRef(id: 6)";
    "bool(16, 10)";
    "while(id: 1)";
    "a(18, 7)";
    "statements(id: 3)";
    "assign(id: 3)";
    "a(19, 5)";
    "a(19, 1)";
    "assign(id: 4)";
    "a(20, 5)";
    "a(20, 1)";
    "do while(id: 1)";
    "b(25, 12)";
    "statements(id: 4)";
    "new_variable(id: 3)";
    "a(23, 5)";
    "typeRef(id: 7)";
    "bool(23, 10)";
    "new_variable(id: 4)";
    "a(24, 5)";
    "typeRef(id: 8)";
    "bool(24, 10)";
    "break(id: 1)";
    "assign(id: 5)";
    "b(27, 1)";
    "Binary (id: 1)";
    "+(id: 1)";
    "a(27, 5)";
    "unary(id: 1)";
    "-(id: 1)";
    "b(27, 10)";
    "assign(id: 6)";
    "b(28, 1)";
    "Binary (id: 2)";
    "+(id: 2)";
    "a(28, 5)";
    "unary(id: 2)";
    "-(id: 2)";
    "b(28, 10)";
    "funcDef(id: 5)";
    "funcSignature(id: 5)";
    "test_func1111(33, 10)";
    "statements(id: 6)";
    "assign(id: 7)";
    "b(34, 1)";
    "Binary (id: 9)";
    "+(id: 6)";
    "a(34, 5)";
    "Binary (id: 8)";
    "+(id: 5)";
    "Brace(id: 1)";
    "unary(id: 3)";
    "-(id: 3)";
    "Binary (id: 3)";
    "/(id: 1)";
    "b(34, 11)";
    "a(34, 15)";
    "unary(id: 7)";
    "-(id: 6)";
    "Binary (id: 7)";
    "and(id: 1)";
    "b(34, 21)";
    "unary(id: 6)";
    "not(id: 1)";
    "Binary (id: 6)";
    "+(id: 4)";
    "a(34, 31)";
    "unary(id: 5)";
    "-(id: 5)";
    "Binary (id: 5)";
    "or(id: 1)";
    "b(34, 36)";
    "Binary (id: 4)";
    "+(id: 3)";
    "a(34, 41)";
    "unary(id: 4)";
    "-(id: 4)";
    "b(34, 46)";
    "literal(id: 1)";
    "str(id: 1)";
    "fasffas(35, 1)";
    "literal(id: 2)";
    "char(id: 1)";
    "f(36, 1)";
    "literal(id: 3)";
    "bool(id: 1)";
    "false(37, 1)";
    "callOrIndexer(id: 1)";
    "afsa(38, 1)";
    "literal(id: 4)";
    "bool(id: 2)";
    "false(38, 6)";
    "literal(id: 5)";
    "str(id: 2)";
    "fq1(38, 13)";
    "source(id: 1)" -> "sourceItem(id: 1)";
    "sourceItem(id: 1)" -> "funcDef(id: 1)";
    "sourceItem(id: 1)" -> "funcDef(id: 2)";
    "sourceItem(id: 1)" -> "funcDef(id: 3)";
    "sourceItem(id: 1)" -> "funcDef(id: 4)";
    "sourceItem(id: 1)" -> "funcDef(id: 5)";
    "funcDef(id: 1)" -> "funcSignature(id: 1)";
    "funcSignature(id: 1)" -> "test_func11(2, 10)";
    "funcSignature(id: 1)" -> "typeRef(id: 2)";
    "typeRef(id: 2)" -> "array(id: 1)";
    "array(id: 1)" -> "typeRef(id: 1)";
    "typeRef(id: 1)" -> "bool(2, 27)";
    "funcDef(id: 2)" -> "funcSignature(id: 2)";
    "funcSignature(id: 2)" -> "test_func11(4, 10)";
    "funcSignature(id: 2)" -> "typeRef(id: 3)";
    "typeRef(id: 3)" -> "custom(id: 1)";
    "custom(id: 1)" -> "stef(4, 27)";
    "funcDef(id: 3)" -> "funcSignature(id: 3)";
    "funcSignature(id: 3)" -> "test_func11(6, 10)";
    "funcSignature(id: 3)" -> "typeRef(id: 4)";
    "typeRef(id: 4)" -> "bool(6, 27)";
    "funcDef(id: 4)" -> "funcSignature(id: 4)";
    "funcDef(id: 4)" -> "statements(id: 5)";
    "funcSignature(id: 4)" -> "test_func111(10, 10)";
    "statements(id: 5)" -> "if_else(id: 1)";
    "statements(id: 5)" -> "while(id: 1)";
    "statements(id: 5)" -> "do while(id: 1)";
    "statements(id: 5)" -> "break(id: 1)";
    "statements(id: 5)" -> "assign(id: 5)";
    "statements(id: 5)" -> "assign(id: 6)";
    "if_else(id: 1)" -> "a(11, 4)";
    "if_else(id: 1)" -> "statements(id: 1)";
    "if_else(id: 1)" -> "statements(id: 2)";
    "statements(id: 1)" -> "assign(id: 1)";
    "statements(id: 1)" -> "assign(id: 2)";
    "assign(id: 1)" -> "a(12, 5)";
    "assign(id: 1)" -> "a(12, 1)";
    "assign(id: 2)" -> "a(13, 5)";
    "assign(id: 2)" -> "a(13, 1)";
    "statements(id: 2)" -> "new_variable(id: 1)";
    "statements(id: 2)" -> "new_variable(id: 2)";
    "new_variable(id: 1)" -> "a(15, 5)";
    "new_variable(id: 1)" -> "typeRef(id: 5)";
    "typeRef(id: 5)" -> "bool(15, 10)";
    "new_variable(id: 2)" -> "a(16, 5)";
    "new_variable(id: 2)" -> "typeRef(id: 6)";
    "typeRef(id: 6)" -> "bool(16, 10)";
    "while(id: 1)" -> "a(18, 7)";
    "while(id: 1)" -> "statements(id: 3)";
    "statements(id: 3)" -> "assign(id: 3)";
    "statements(id: 3)" -> "assign(id: 4)";
    "assign(id: 3)" -> "a(19, 5)";
    "assign(id: 3)" -> "a(19, 1)";
    "assign(id: 4)" -> "a(20, 5)";
    "assign(id: 4)" -> "a(20, 1)";
    "do while(id: 1)" -> "b(25, 12)";
    "do while(id: 1)" -> "statements(id: 4)";
    "statements(id: 4)" -> "new_variable(id: 3)";
    "statements(id: 4)" -> "new_variable(id: 4)";
    "new_variable(id: 3)" -> "a(23, 5)";
    "new_variable(id: 3)" -> "typeRef(id: 7)";
    "typeRef(id: 7)" -> "bool(23, 10)";
    "new_variable(id: 4)" -> "a(24, 5)";
    "new_variable(id: 4)" -> "typeRef(id: 8)";
    "typeRef(id: 8)" -> "bool(24, 10)";
    "assign(id: 5)" -> "b(27, 1)";
    "assign(id: 5)" -> "Binary (id: 1)";
    "Binary (id: 1)" -> "+(id: 1)";
    "+(id: 1)" -> "a(27, 5)";
    "+(id: 1)" -> "unary(id: 1)";
    "unary(id: 1)" -> "-(id: 1)";
    "-(id: 1)" -> "b(27, 10)";
    "assign(id: 6)" -> "b(28, 1)";
    "assign(id: 6)" -> "Binary (id: 2)";
    "Binary (id: 2)" -> "+(id: 2)";
    "+(id: 2)" -> "a(28, 5)";
    "+(id: 2)" -> "unary(id: 2)";
    "unary(id: 2)" -> "-(id: 2)";
    "-(id: 2)" -> "b(28, 10)";
    "funcDef(id: 5)" -> "funcSignature(id: 5)";
    "funcDef(id: 5)" -> "statements(id: 6)";
    "funcSignature(id: 5)" -> "test_func1111(33, 10)";
    "statements(id: 6)" -> "assign(id: 7)";
    "statements(id: 6)" -> "literal(id: 1)";
    "statements(id: 6)" -> "literal(id: 2)";
    "statements(id: 6)" -> "literal(id: 3)";
    "statements(id: 6)" -> "callOrIndexer(id: 1)";
    "assign(id: 7)" -> "b(34, 1)";
    "assign(id: 7)" -> "Binary (id: 9)";
    "Binary (id: 9)" -> "+(id: 6)";
    "+(id: 6)" -> "a(34, 5)";
    "+(id: 6)" -> "Binary (id: 8)";
    "Binary (id: 8)" -> "+(id: 5)";
    "+(id: 5)" -> "Brace(id: 1)";
    "+(id: 5)" -> "unary(id: 7)";
    "Brace(id: 1)" -> "unary(id: 3)";
    "unary(id: 3)" -> "-(id: 3)";
    "-(id: 3)" -> "Binary (id: 3)";
    "Binary (id: 3)" -> "/(id: 1)";
    "/(id: 1)" -> "b(34, 11)";
    "/(id: 1)" -> "a(34, 15)";
    "unary(id: 7)" -> "-(id: 6)";
    "-(id: 6)" -> "Binary (id: 7)";
    "Binary (id: 7)" -> "and(id: 1)";
    "and(id: 1)" -> "b(34, 21)";
    "and(id: 1)" -> "unary(id: 6)";
    "unary(id: 6)" -> "not(id: 1)";
    "not(id: 1)" -> "Binary (id: 6)";
    "Binary (id: 6)" -> "+(id: 4)";
    "+(id: 4)" -> "a(34, 31)";
    "+(id: 4)" -> "unary(id: 5)";
    "unary(id: 5)" -> "-(id: 5)";
    "-(id: 5)" -> "Binary (id: 5)";
    "Binary (id: 5)" -> "or(id: 1)";
    "or(id: 1)" -> "b(34, 36)";
    "or(id: 1)" -> "Binary (id: 4)";
    "Binary (id: 4)" -> "+(id: 3)";
    "+(id: 3)" -> "a(34, 41)";
    "+(id: 3)" -> "unary(id: 4)";
    "unary(id: 4)" -> "-(id: 4)";
    "-(id: 4)" -> "b(34, 46)";
    "literal(id: 1)" -> "str(id: 1)";
    "str(id: 1)" -> "fasffas(35, 1)";
    "literal(id: 2)" -> "char(id: 1)";
    "char(id: 1)" -> "f(36, 1)";
    "literal(id: 3)" -> "bool(id: 1)";
    "bool(id: 1)" -> "false(37, 1)";
    "callOrIndexer(id: 1)" -> "afsa(38, 1)";
    "callOrIndexer(id: 1)" -> "literal(id: 4)";
    "callOrIndexer(id: 1)" -> "literal(id: 5)";
    "literal(id: 4)" -> "bool(id: 2)";
    "bool(id: 2)" -> "false(38, 6)";
    "literal(id: 5)" -> "str(id: 2)";
    "str(id: 2)" -> "fq1(38, 13)";
}
